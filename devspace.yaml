version: v2beta1
name: e-commerce

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      build_images --all    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev --all                # 4. Start dev mode "app" (see "dev" section)

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    # This deployment uses `kubectl` but you can also define `helm` deployments
    kubectl:
      manifests:
        - ./infra
      kustomize: true

images:
  user:
    image: e-commerce/user
    tags:
      - user-service
    dockerfile: ./services/user/Dockerfile
    context: ./services/user
    rebuildStrategy: always
    skipPush: true
  product:
    image: e-commerce/product
    tags:
      - product-service
    dockerfile: ./services/product/Dockerfile
    context: ./services/product
    rebuildStrategy: always
    skipPush: true
  cart:
    image: e-commerce/cart
    tags:
      - cart-service
    dockerfile: ./services/cart/Dockerfile
    context: ./services/cart
    rebuildStrategy: always
    skipPush: true
  order:
    image: e-commerce/order
    tags:
      - order-service
    dockerfile: ./services/order/Dockerfile
    context: ./services/order
    rebuildStrategy: always
    skipPush: true
  expiration:
    image: e-commerce/expiration
    tags:
      - expiration-service
    dockerfile: ./services/expiration/Dockerfile
    context: ./services/expiration
    rebuildStrategy: always
    skipPush: true
  payment:
    image: e-commerce/payment
    tags:
      - payment-service
    dockerfile: ./services/payment/Dockerfile
    context: ./services/payment
    rebuildStrategy: always
    skipPush: true
# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  user:
    imageSelector: e-commerce/user
    logs:
      enabled: true
      lastLines: 100
    sync:
      - path: ./services/user:/app
  product:
    imageSelector: e-commerce/product
    logs:
      enabled: true
      lastLines: 100
    sync:
      - path: ./services/product:/app
  cart:
    imageSelector: e-commerce/cart
    logs:
      enabled: true
      lastLines: 100
    sync:
      - path: ./services/cart:/app
  order:
    imageSelector: e-commerce/order
    logs:
      enabled: true
      lastLines: 100
    sync:
      - path: ./services/order:/app
  expiration:
    imageSelector: e-commerce/expiration
    logs:
      enabled: true
      lastLines: 100
    sync:
      - path: ./services/expiration:/app
  payment:
    imageSelector: e-commerce/payment
    logs:
      enabled: true
      lastLines: 100
    sync:
      - path: ./services/payment:/app
# Use the `commands` section to define repeatable dev workflows for this project
commands:
  migrate-db:
    command: |-
      echo 'This is a cross-platform, shared command that can be used to codify any kind of dev task.'
      echo 'Anyone using this project can invoke it via "devspace run migrate-db"'

